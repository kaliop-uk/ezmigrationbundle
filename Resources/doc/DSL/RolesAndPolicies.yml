# Possible limitation types and values the types accept
#
# The types are defined by eZ Publish's Role service
# All values must be arrays even if it is a single value
#
#  ContentType limitation example:
#  identifier: Class
#  values: [1, 2, 3] # List of content type ids. Can be specified using identifier as well
#
#  Language limitation example:
#  identifier: Language
#  values: [eng-GB, eng-US] # List of valid language codes
#
#  Location limitation example"
#  identifier: Node
#  values: [2, 345] # List of location ids. Can be specified using remote id as well
#
#  Owner limitation
#  identifier: Owner
#  values: [x] # must be either 1 (owner) or 2 (session)
#
#  ParentContentType limitation example:
#  identifier: ParentClass
#  values: [1, 2, 3] # List of content type ids. Can be specified using identifier as well
#
#  ParentDepth limitation example:
#  identifier: ParentDepth
#  values: [x]
#
#  ParentOwner limitation example:
#  identifier: ParentOwner
#  values: [x] # either 1 (owner) or 2 (session)
#
#  ParentUserGroup limitation example:
#  identifier: ParentGroup
#  values: [1] # must be 1 (owner)
#
#  Section limitation example:
#  identifier: Section
#  values: [1, 2, 3] # List of section ids. Can be specified using identifier as well
#
#  Siteaccess limitation example: (Not implemented yet in eZ Publish 5 API)
#  identifier: SiteAccess
#  values: [siteaccess, siteaccess] # List of siteaccess name strings
#
#  Subtree limitation example:
#  identifier: Subtree
#  values: [/1/2/3/4, /1/2/3/15] # List of subtree path strings, needs to be the location path
#
#  UserGroup limitation example:
#  identifier: UserGroup
#  values: [1] # must be 1 (owner)
-
    type: role
    mode: create
    name: xyz # Name of the role
    policies: # Optional
        -
            module: xyz
            function: xyz # to grant access to all function, use '*' (including simple quotes)
            limitations: # Optional
                -
                    identifier: xyz
                    values: [x, y]
        -
            module: xyz
            function: xyz
            limitations:
                -
                    identifier: xyz
                    values: [x, y]
    assign: # Optional
        -
            type: user|group # Must be user or group
            ids: [x, y, z] # List of user IDs to assign the new role to
            limitations: # Optional limitation on role assignment
                -
                    identifier: xyz # natively supported: Subtree and Section
                    values: [x, y]
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: role_id and role_identifier
                                   # The shorthand 'id' can be used instead of 'role_id'
                                   # The shorthand 'identifier' can be used instead of 'role_identifier'
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: role
    mode: update
    match: # Only one of the following can be specified, to define which roles to update
        id: x # int|int[]
        identifier: xyz # string|string[]
        all: ~ # matches ALL roles
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
        not: # matches elements NOT satisfying the wrapped condition
            _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id or identifier
    new_name: # Optional (note: this field might be renamed in the future)
    assign: # Optional
        -
            type: # Must be user or group
            ids: [x, y, z] # List of user IDs to assign the new role to
            limitations: # Optional role limitation on assignment
                -
                    identifier: xyz
                    values: [x, y]
    unassign: # Optional. Same values as for 'assign'
    policies: # Optional.
              # NB: *take care* this does not work like content type updates or content updates.
              # If this set, all previously existing policies not specified in this list will be removed!
              # The safest and simplest way to make sure that you do not forget any of the existing policies is to first
              # generate an update migration that has the complete specification of the role as it currently is defined,
              # and then edit manually. See the main readme file for an example of such a command.
        -
            module: xyz
            function: xyz
            limitations:
                -
                    identifier: xyz
                    values: [x, z]
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: role_id and role_identifier
                                   # The shorthand 'id' can be used instead of 'role_id'
                                   # The shorthand 'identifier' can be used instead of 'role_identifier'
                                   # 'count' can be used to set a reference to the number of items matched
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: role
    mode: delete
    match: # Only one of the following can be specified, to define which roles to remove
        id: x # int|int[]
        identifier: xyz # string|string[]
        all: ~ # matches ALL roles
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
        not: # matches elements NOT satisfying the wrapped condition
            _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id or identifier
    references: # Optional. See above for allowed values
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: role
    mode: load
    match: # Only one of the following can be specified, to define which roles to remove
        id: x # int|int[]
        identifier: xyz # string|string[]
        all: ~ # matches ALL roles
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
        not: # matches elements NOT satisfying the wrapped condition
            _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id or identifier
    references: # Optional. See above for allowed values
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies
