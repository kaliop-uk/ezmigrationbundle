# NB: user/create and user/update migration steps do not allow full manipulation of the user Content.
# Fe. they do not allow to set a value for the remote_id or to set values for the different Fields (attributes).
# The known workaround to that is to use 2 migration steps, one which creates/updates the User and one which
# creates/updates the related Content.
# See https://github.com/kaliop-uk/ezmigrationbundle/issues/191 for an example of how to do it.

-
    type: user
    mode: create
    first_name: xyz
    last_name: xyz
    username: xyz
    email: xyz
    password: xyz. # NB: The given password string is the plaintext version; it will be automatically hashed in the cms. PLEASE DON'T LET CLEARTEXT PASSWORDS BE STORED IN YOUR SOURCE CODE VERSIONING SYSTEMS
    user_content_type: xxx # Optional, Content Type identifier (defaults to 'user')
    lang: xxx-YY # Optional, will fallback to default language if not provided (--default-language option or 'eng-GB' by default)
    groups: [x, y, z] # The user group ID or IDs (Content IDs or its/their remote_ids as string) to put the user into
    roles: [x, y, z] # The role names or ids to assign to the user
    # The list in references tells the manager to store specific values for later use
    # by other steps in the current migration.
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attribute # An attribute to get the value of for the reference.
                                 # Supports user_id, email, enabled, login, groups_ids (the latter returns an array)
                                 # The shorthand 'id' can be used instead of 'user_id'
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: user
    mode: update
    match: # Only one of the following can be specified, to define which users to update
        id: x # int|int[]
        email: xyz # string|string[]
        login: # string|string[]
        usergroup_id: # string|string[]
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'

        # NB: if you need more complex matching conditions to select a set of users, you can achieve that using a slightly convoluted way:
        #     1. use a content/load migration step to match the contents which represent your users
        #     2. in that step, set an reference, of type array, where you store the content ids
        #     3. in a second migration step, use a loop/over construct to iterate over the reference and
        #        the use as substep a user/update where you match based on user_id
        #        eg:
        #    -
        #        type: content
        #        mode: load
        #        match:
        #            contenttype_identifier: editor_user
        #        expect: many
        #        references:
        #        -
        #            identifier: editor_user_ids
        #            attribute: content_id
        #    -
        #        type: loop
        #        over: "reference:editor_user_ids"
        #        steps:
        #        -
        #            type: user
        #            mode: update
        #            match:
        #                user_id: "loop:value"
        #            password: publish
        #            attributes:
        #                first_name: "faker: firstName"
        #                last_name: "faker: lastName"

    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id, email or login
    email: xyz # Optional. NB: can only be set if the match definition latches a single user
    password: xyz # Optional. NB: The given password string is the plaintext version; it will be automatically hashed in the cms. PLEASE DON'T LET CLEARTEXT PASSWORDS BE STORED IN YOUR SOURCE CODE VERSIONING SYSTEMS
    enabled: true|false # Optional
    # Optional, Group ID / list of group IDs (or its/their remote_ids) the user has to be a member of.
    # The user will be removed from all groups that are not in the list
    groups: [x, y, z]
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attribute # An attribute to get the value of for the reference.
                                 # Supports user_id, email, enabled, login, groups_ids (the latter returns an array)
                                 # The shorthand 'id' can be used instead of 'user_id'
                                 # 'count' can be used to set a reference to the number of items matched
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: user
    mode: delete
    match: # Only one of the following can be specified, to define which users to delete
        id: x # int|int[]
        email: xyz # string|string[]
        login: # string|string[]
        usergroup_id: # string|string[]
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
        # NB: if you need more complex matching conditions to select a set of users, see user/update above
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id, email or login
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attribute # An attribute to get the value of for the reference.
                                 # Supports user_id, email, enabled, login, groups_ids (the latter returns an array)
                                 # The shorthand 'id' can be used instead of 'user_id'
                                 # 'count' can be used to set a reference to the number of items matched
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: user
    mode: load
    match: # Only one of the following can be specified, to define which users to delete
        id: x # int|int[]
        email: xyz # string|string[]
        login: # string|string[]
        usergroup_id: # string|string[]
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id, email or login
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attribute # An attribute to get the value of for the reference.
                                 # Supports user_id, email, enabled, login, groups_ids (the latter returns an array)
                                 # The shorthand 'id' can be used instead of 'user_id'
                                 # 'count' can be used to set a reference to the number of items matched
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: user_group
    mode: create
    parent_group_id: x # The content ID of the user group to put the new group into, can be an array. Content remote_id(s) also supported.
    name: xyz
    description: xyz # Optional
    roles: [x, y, z] # The role names or ids to assign to the group
    remote_id: custom_remote_id # Optional, will set a custom remote id
    section: x # string|int Optional section id or identifier
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attribute # An attribute to get the value of for the reference.
                                 # Supports: user_group_id, parent_user_group_id, users_ids (the latter returns an array)
                                 # The shorthand 'id' can be used instead of 'user_group_id'
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: user_group
    mode: update
    match: # Define which groups to update. Only one match condition at a time supported
        id: x # int|int[]
        content_remote_id: yyy # string|string[]
        parent_usergroup_id: yyy # string|string[]
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'

        # NB: if you need more complex matching conditions to select a set of usergroups, see user/update above

    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id, remote_id or parent id
    name: xyz # Optional. Can only be used when the group to be updated is single
    description: xyz # Optional
    parent_group_id: x # Optional, the new parent user group ID or group's remote_id
    lang: xxx-YY # Optional, will fallback to default language if not provided (--default-language option or 'eng-GB' by default)
    remote_id: custom_remote_id # Optional, will set a custom remote id
    section: x # string|int Optional section id or identifier
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attribute # An attribute to get the value of for the reference
                                 # Supports: user_group_id, parent_user_group_id, users_ids (the latter returns an array)
                                 # The shorthand 'id' can be used instead of 'user_group_id'
                                 # 'count' can be used to set a reference to the number of items matched
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    # Note: The users which are not assigned to other groups will be deleted.
    type: user_group
    mode: delete
    match: # Only one of the following can be specified, to define which groups to delete
        id: x # int|int[]
        content_remote_id: yyy # string|string[]
        parent_usergroup_id: yyy # string|string[]
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'

        # NB: if you need more complex matching conditions to select a set of usergroups, see user/update above

    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id, remote_id or parent id
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attribute # An attribute to get the value of for the reference
                                 # Supports: user_group_id, parent_user_group_id, users_ids (the latter returns an array)
                                 # The shorthand 'id' can be used instead of 'user_group_id'
                                 # 'count' can be used to set a reference to the number of items matched
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: user_group
    mode: load
    match: # Only one of the following can be specified, to define which groups to delete
        id: x # int|int[]
        content_remote_id: yyy # string|string[]
        parent_usergroup_id: yyy # string|string[]
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id, remote_id or parent id
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attribute # An attribute to get the value of for the reference
                                 # Supports: user_group_id, users_ids (the latter returns an array)
                                 # The shorthand 'id' can be used instead of 'user_group_id'
                                 # 'count' can be used to set a reference to the number of items matched
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies
