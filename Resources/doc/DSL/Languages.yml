-
    # Create a new language
    type: language
    mode: create
    lang: abc-DE
    name: something
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: language_id, enabled, language_code, name
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    # Updates an existing language
    type: language
    mode: update
    match:
        langauge_id: x # int|int[]
        language_code: xyz # string|string[]
        all: ~ # matches ALL languages
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
        not: # matches elements NOT satisfying the wrapped condition
            _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id or code
    name: something
    enabled: true|false
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: language_id, enabled, language_code, name
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    # Delete an existing language
    type: language
    mode: delete
    match:
        langauge_id: x # int|int[]
        language_code: xyz # string|string[]
        all: ~ # matches ALL languages
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
        not: # matches elements NOT satisfying the wrapped condition
            _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id or code
    name: something
    enabled: true|false
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: language_id, enabled, language_code, name
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    # Loads an existing language, useful for setting references
    type: language
    mode: load
    match:
        langauge_id: x # int|int[]
        language_code: xyz # string|string[]
        all: ~ # matches ALL languages
        or: # match any of the conditions below. *NB:* less efficient that using the array notation for a single condition
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition can be any of ones specified above, including 'and' and 'or'
        and: # match all of the conditions below
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
            -
                _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
        not: # matches elements NOT satisfying the wrapped condition
            _condition_: value # where _condition_ can be any of ones specified above, including 'and' and 'or'
    match_tolerate_misses: false # optional. Do not fail the execution if there is no item matching, when matching by id or code
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: language_id, enabled, language_code, name
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    expect: one|any|many # Optional. If set, the number of matched items will be validated, and the type of values set to created references will change
                         # 'one': only one element should be matched; reference values will be scalars
                         # 'any': zero or more element should be matched; reference values will be arrays
                         # 'many': one or more element should be matched; reference values will be arrays
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies
