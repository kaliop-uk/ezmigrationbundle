-
    # Load a file's contents or metadata into a reference
    type: file
    mode: load
    file: xxx # string. Filename including path. References will be resolved
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: size, uid, gid, ctime, mtime, atime, body
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    # Check file existence and save the information into a reference
    type: file
    mode: exists
    file: xxx # string. Filename including path. References will be resolved
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references:
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: exists # only one type of attribute is supported: exists
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: file
    mode: save
    file: xxx # string. Filename including path. References will be resolved
    body: "file contents" # string. References will be replaced as long as they are within square brackets
                          # eg. to save to a file the value of reference 'abc', write: body: "[reference:abc]"
    template: path/to/file # optional. Alternative to using the "body" tag: load body from the template file
                           # References will be resolved in the file path, as well as in the template itself
                           # Path will be resolved as relative to $migrationFile/templates/ first and absolute 2nd
    overwrite: true|false # Optional, default false. If not set, and the file already exists, an exception is thrown
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: size, uid, gid, ctime, mtime, atime, body
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: file
    mode: append
    file: xxx # string. Filename including path. References will be resolved
    body: "appended file contents" # string. References will be replaced as long as they are within square brackets
                                   # eg. to save to a file the value of reference 'abc', write: body: "[reference:abc]"
    template: path/to/file # optional. Alternative to using the "body" tag: load body from the template file.
                           # References will be resolved in the file path
                           # Path will be resolved as relative to $migrationFile/templates/ first and absolute 2nd
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: size, uid, gid, ctime, mtime, atime, body
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: file
    mode: prepend
    file: xxx # string. Filename including path. References will be resolved
    body: "prepended file contents" # string. References will be replaced as long as they are within square brackets
                                    # eg. to save to a file the value of reference 'abc', write: body: "[reference:abc]"
    template: path/to/file # optional. Alternative to using the "body" tag: load body from the template file
                           # References will be resolved in the file path
                           # Path will be resolved as relative to $migrationFile/templates/ first and absolute 2nd
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: size, uid, gid, ctime, mtime, atime, body
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: file
    mode: delete
    file: xxx # string. Filename including path. References will be resolved
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference.
                                   # Supports: size, uid, gid, ctime, mtime, atime, body
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: file
    mode: copy
    from: xxx # string. Filename including path. References will be resolved
    to: yyy # string. Filename including path. References will be resolved
    overwrite: true|false # Optional, default false. If not set, and the target file already exists, an exception is thrown
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference *taken from the source file*.
                                   # Supports: size, uid, gid, ctime, mtime, atime, body
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies

-
    type: file
    mode: move
    from: xxx # string. Filename including path. References will be resolved
    to: yyy # string. Filename including path. References will be resolved
    overwrite: true|false # Optional, default false. If not set, and the target file already exists, an exception is thrown
    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        # short syntax:
        referenceId: attributeId # (possible values and meaning are explained for the 'long syntax')
        # long syntax:
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # An attribute to get the value of for the reference *taken from the source file*.
                                   # Supports: size, uid, gid, ctime, mtime, atime, body
            overwrite: true|false # Optional, default false. If not set, and the reference already exists, an exception is thrown
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies
