# A config file listing the environment variables which can be used to customize the build and execution of the Test Docker Stack
#
# The variables in this file are used  by docker-compose.yml, which in turn passes most of them down to the containers,
# both at build time and run time.
#
# In order to use this file, first copy it to one named '.env', then edit the copy:
# uncomment only the variables whose value you want to change.
#
# The default value for each variable is the one seen below (even though technically the actual default is set in docker-compose.yml).
#
# NB: if adding custom env vars check out out for possible naming conflicts: https://docs.docker.com/compose/reference/envvars/

# The project name is used as prefix for the name of the containers that will be built.
# This allows to build and run different copies of the stack in parallel
#COMPOSE_PROJECT_NAME=kezmbtest

# Custom Timezone for the containers. Use 'none' as null value
#COMPOSE_TZ=none
###COMPOSE_TZ=Europe/London

# Use alternative debian mirrors when building 'surrogate/helper' containers. Useful if there are problems with the default mirrors
# Use 'none' as null value
#COMPOSE_DEBIAN_MIRROR=none
###COMPOSE_DEBIAN_MIRROR=http://cloudfront.debian.net/debian

# The OS used for the container running the tests is Debian.
# Use alternative debian versions to have eg. different php versions onboard. Supported values: jessie, stretch, buster
#COMPOSE_DEBIAN_VERSION=buster

# With stretch/buster os, you can also define a custom php version to use. Supported values: 'default', '7.0' .. '7.4'
# php default versions in debian: jessie: 5.6; stretch: 7.0; buster: 7.3
#COMPOSE_PHP_VERSION=default

# Set this to 'false' if you do not want to update all the installed debian packages at the time of build in every container.
# Trick: you can change this to a different string and then run '...' to force a rebuild of the stack that will
# only include debian package updates. You could use f.e. a timestamp as value: 20180428
# NB: updating the base operating system is a good security practice, but it always comes with a risk of breaking things...
#COMPOSE_DO_UPDATE_OS=true

# Used for the subnet local to Docker.
# *NB*: UNUSED AT THE MOMENT
# *NB*: use only the first 3 bytes, as we assume a /24 subnet! No dot at the end.
# Note: private IP subnets go from 172.16.* to 172.31.*
# Note: if you change this value after building the stack once, the modified setting not have effect until:
#       1. you remove the network: `docker network rm kezmbtest_default`
#       2. you let docker recreate the network: ...
#       3. you attach all containers to the new network: ...
#COMPOSE_SUBNET=172.19.30

# Where the data is stored (on the host computer) which we mount as volumes in the container.
# Modify this if you want to run multiple versions of the test stack in parallel or persisting their databases.
# Paths are relative to the folder where docker-compose.yml is
#COMPOSE_APP_DIR=../..
#COMPOSE_DATA_DIR=./data
#COMPOSE_LOGS_DIR=./logs

### Containers Runtime Settings

# Your user ID and group (as used on host computer) - used to eliminate file permissions problems between the containers
# and the host
#   On Ubuntu/Debian, the 1st user is generally 1000
#   To find out what your current IDs are, run the command `id`
#CONTAINER_USER_UID=1000
#CONTAINER_USER_GID=1000

### Database Settings

# Either mysql or postgresql
# NB: Postgres support is not yet complete!
#DB_TYPE=mysql
#DB_ROOT_PASSWORD=root_test
#DB_EZ_USER=ezp
#DB_EZ_PASSWORD=ezp
#DB_EZ_DATABASE=behattestdb
# optional, use only to connect to other databases that the built-in ones
#DB_HOST=
# optional, use only to test problems with non-utf8 character sets
#DB_CHARSET=

### MySQL
# NB: these are used when the db is created the 1st time the platform is executed. Changing them afterwards will have
# no effect (unless you delete the db data files)
#MYSQL_VERSION=5.6

### PostgreSQL
#POSTGRESQL_VERSION=9.5

### Webserver Settings
# @todo

### Settings used for running tests, including setup of eZ
# In file .travis.yml you can find other sets of values used for testing different versions of eZ
#SYMFONY_ENV=behat
#APP_ENV=behat
# Composer packages to install (besides the ones defined in the composer.json of your bundle)
#EZ_PACKAGES=ezsystems/ezplatform:^2.5.0 ezsystems/ezplatform-xmltext-fieldtype:^1.8 ezsystems/behatbundle:^6.5 netgen/tagsbundle:^3.0 sensio/generator-bundle overblog/graphiql-bundle
# Optional. Use this instead of EZ_PACKAGES if you have a pre-calculated Composer lock file to use for installing
# the vendor packages. This can be used fe. to save time and memory when running the tests on CI platforms, esp. with php 5
#EZ_COMPOSER_LOCK=
# Bundles to activate
#EZ_BUNDLES=Kaliop\eZMigrationBundle\EzMigrationBundle Lolautruche\EzCoreExtraBundle\EzCoreExtraBundle EzSystems\EzPlatformXmlTextFieldTypeBundle\EzSystemsEzPlatformXmlTextFieldTypeBundle Netgen\TagsBundle\NetgenTagsBundle
# Optional. A symfony yaml config file containing parameters and services used by the tests
#EZ_TEST_CONFIG_SYMFONY=

# Optional. When left empty, EZ_VERSION will be inferred from the eZ kernel installed via composer
#EZ_VERSION=ezplatform2
# Optional. When left empty, the name of the actual composer vendor dir used will be created hashing the value of EZ_PACKAGES.
# This allows to set up and run multiple test environments in parallel inside the same root application directory.
# Example value: vendor_communityproject
# NB: cave canem! If you give a non empty value to this, and later you change the value of EZ_PACKAGES, it will be up to
#     you to force Composer to be executed again.
#COMPOSER_VENDOR_DIR=
